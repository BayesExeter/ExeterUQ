zlim = range(na.omit(-Term2[[i]]/2)),
xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = '')
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
length(which(Timps1 <= Tbound))
source('~/Desktop/rpackage1/bayesdesign/R/bayes_optim_design.R')
BOD_detailed_statistics = list()
tVariance_two <- list()
Term1 <- list()
Term2 <- list()
Term3 <- list()
for(i in 1:length(candidate_designs)) {
Candidate.list = CandidateDesign_computation(CandidateDesign = candidate_designs[[i]],
Design = Em_Mean$train_data[, 1:2],
param.MAP = param.MAP,
EmulatorFastParts = JamesExample_gp$FastParts,
EmulatorLinModel = Em_Mean$lm$linModel)
BOD_detailed_statistics[[i]] = bayes_optim_design(CandidateDesign = candidate_designs[[i]],
Design = Em_Mean$train_data[, 1:2],
Xp = BigDesign[which(Timps1 <= Tbound)[sample(1:22308, 10000, replace = TRUE)],1:2],
M = 10000, Cutoff = 9, z = -4,
V_o = 0, V_m = 0.005,
EmulatorFastParts = JamesExample_gp$FastParts,
EmulatorLinModel = Em_Mean$lm$linModel,
param.MAP = param.MAP, Candidate.list,
batches = 500, FastVersion = FALSE,
IntegrationShortcut = FALSE)
tVariance_two[[i]] <-ResultPanel(x1var = 'V1', x2var = 'V5', Resolution = c(50, 50),
ImpData = cbind(BOD_detailed_statistics[[i]]$Xp_sample,
BOD_detailed_statistics[[i]]$tVariance_two))
Term1[[i]] <- ResultPanel(x1var = 'V1', x2var = 'V5', Resolution = c(50, 50),
ImpData = cbind(BOD_detailed_statistics[[i]]$Xp_sample,
BOD_detailed_statistics[[i]]$Term1Samples))
Term2[[i]] <- ResultPanel(x1var = 'V1', x2var = 'V5', Resolution = c(50, 50),
ImpData = cbind(BOD_detailed_statistics[[i]]$Xp_sample,
BOD_detailed_statistics[[i]]$Term2Samples))
Term3[[i]] <- ResultPanel(x1var = 'V1', x2var = 'V5', Resolution = c(50, 50),
ImpData = cbind(BOD_detailed_statistics[[i]]$Xp_sample,
BOD_detailed_statistics[[i]]$Term3Samples))
}
c(BOD_detailed_statistics[[1]]$result-2*BOD_detailed_statistics[[1]]$resultstd_err,
BOD_detailed_statistics[[1]]$result,
BOD_detailed_statistics[[1]]$result + 2*BOD_detailed_statistics[[1]]$resultstd_err)
c(BOD_detailed_statistics[[2]]$result-2*BOD_detailed_statistics[[2]]$resultstd_err,
BOD_detailed_statistics[[2]]$result,
BOD_detailed_statistics[[2]]$result + 2*BOD_detailed_statistics[[2]]$resultstd_err)
c(BOD_detailed_statistics[[3]]$result-2*BOD_detailed_statistics[[3]]$resultstd_err,
BOD_detailed_statistics[[3]]$result,
BOD_detailed_statistics[[3]]$result + 2*BOD_detailed_statistics[[3]]$resultstd_err)
n.grid=50
x.grid <- y.grid <- seq(-1,1,length=n.grid)
design.grid <- expand.grid(x.grid, y.grid)
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(tVariance_two[[i]], n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid,
col = rev(heat.colors(50)), xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = '',
zlim = range(na.omit(tVariance_two[[1]]),
na.omit(tVariance_two[[2]]),
na.omit(tVariance_two[[3]])))
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(Term1[[i]], n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid, col = rev(heat.colors(50)),
zlim = range(na.omit(Term1[[i]])),
xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = '')
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(-Term2[[i]]/2, n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid, col = rev(heat.colors(50)),
zlim = range(na.omit(-Term2[[i]]/2)),
xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = '')
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
BOD_detailed_statistics = list()
tVariance_two <- list()
Term1 <- list()
Term2 <- list()
Term3 <- list()
Xp_sample = BigDesign[which(Timps1 <= Tbound)[sample(1:22308, 10000, replace = TRUE)],1:2]
for(i in 1:length(candidate_designs)) {
Candidate.list = CandidateDesign_computation(CandidateDesign = candidate_designs[[i]],
Design = Em_Mean$train_data[, 1:2],
param.MAP = param.MAP,
EmulatorFastParts = JamesExample_gp$FastParts,
EmulatorLinModel = Em_Mean$lm$linModel)
BOD_detailed_statistics[[i]] = bayes_optim_design(CandidateDesign = candidate_designs[[i]],
Design = Em_Mean$train_data[, 1:2],
Xp = Xp_sample,
M = 10000, Cutoff = 9, z = -4,
V_o = 0, V_m = 0.005,
EmulatorFastParts = JamesExample_gp$FastParts,
EmulatorLinModel = Em_Mean$lm$linModel,
param.MAP = param.MAP, Candidate.list,
batches = 500, FastVersion = FALSE,
IntegrationShortcut = FALSE)
tVariance_two[[i]] <-ResultPanel(x1var = 'V1', x2var = 'V5', Resolution = c(50, 50),
ImpData = cbind(BOD_detailed_statistics[[i]]$Xp_sample,
BOD_detailed_statistics[[i]]$tVariance_two))
Term1[[i]] <- ResultPanel(x1var = 'V1', x2var = 'V5', Resolution = c(50, 50),
ImpData = cbind(BOD_detailed_statistics[[i]]$Xp_sample,
BOD_detailed_statistics[[i]]$Term1Samples))
Term2[[i]] <- ResultPanel(x1var = 'V1', x2var = 'V5', Resolution = c(50, 50),
ImpData = cbind(BOD_detailed_statistics[[i]]$Xp_sample,
BOD_detailed_statistics[[i]]$Term2Samples))
Term3[[i]] <- ResultPanel(x1var = 'V1', x2var = 'V5', Resolution = c(50, 50),
ImpData = cbind(BOD_detailed_statistics[[i]]$Xp_sample,
BOD_detailed_statistics[[i]]$Term3Samples))
}
c(BOD_detailed_statistics[[1]]$result-2*BOD_detailed_statistics[[1]]$resultstd_err,
BOD_detailed_statistics[[1]]$result,
BOD_detailed_statistics[[1]]$result + 2*BOD_detailed_statistics[[1]]$resultstd_err)
c(BOD_detailed_statistics[[2]]$result-2*BOD_detailed_statistics[[2]]$resultstd_err,
BOD_detailed_statistics[[2]]$result,
BOD_detailed_statistics[[2]]$result + 2*BOD_detailed_statistics[[2]]$resultstd_err)
c(BOD_detailed_statistics[[3]]$result-2*BOD_detailed_statistics[[3]]$resultstd_err,
BOD_detailed_statistics[[3]]$result,
BOD_detailed_statistics[[3]]$result + 2*BOD_detailed_statistics[[3]]$resultstd_err)
n.grid=50
x.grid <- y.grid <- seq(-1,1,length=n.grid)
design.grid <- expand.grid(x.grid, y.grid)
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(tVariance_two[[i]], n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid,
col = rev(heat.colors(50)), xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = '',
zlim = range(na.omit(tVariance_two[[1]]),
na.omit(tVariance_two[[2]]),
na.omit(tVariance_two[[3]])))
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(Term1[[i]], n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid, col = rev(heat.colors(50)),
zlim = range(na.omit(Term1[[i]])),
xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = '')
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(-Term2[[i]]/2, n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid, col = rev(heat.colors(50)),
zlim = range(na.omit(-Term2[[i]]/2)),
xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = '')
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(Term3[[i]], n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid, col = rev(heat.colors(50)),
zlim = range(na.omit(Term3[[i]])),
xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = '')
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(tVariance_two[[i]], n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid,
col = rev(heat.colors(50)), xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = '',
zlim = range(na.omit(tVariance_two[[1]]),
na.omit(tVariance_two[[2]]),
na.omit(tVariance_two[[3]])))
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(Term1[[i]], n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid, col = rev(heat.colors(50)),
zlim = range(na.omit(Term1[[i]])),
xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = '')
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
Em_Mean$train_data
head(Em_Mean$train_data)
head(tData)
names(Em_Mean$lm)
Em_Mean$lm$ResponseString
Em_Mean$lm$linModel
# Produce LOO plots
LOO_JamesExample = LOO.plot(StanEmulator = JamesExample_gp, ParamNames = cands, Obs = -4,
ObsErr = 0.005)
names(Em_Mean)
head(Em_Mean$validation_data)
# Produce Validation plots
Valid_JamesExample = ValidationStan(NewData = Em_Mean$validation_data, Emulator = JamesExample_gp, main = "")
ValidateGasp(Em_Mean) # by default, predicts for the validation points
par(mfrow=c(2,2), mar=c(4,2,2,2)); ValidateGasp(Em_Mean, IndivPars = TRUE) # plots vs each input
# Predicting from emulator
tmp_seq <- seq(from = -1, to = 1, by = 0.01)
BigDesign <- as.data.frame(expand.grid(tmp_seq, tmp_seq)) # space-filling grid in 2D
colnames(BigDesign) <- c('V1','V5')
BigPred_W1 <- PredictGasp(BigDesign, Em_Mean) # evbaluates emulator at design
summary(BigPred_W1) # returns expectation ($mean), standard deviation ($sd), etc.
# Emulator
summary(Em_Mean)
Em_Mean$train_data # 100 points sampled randomly from Design, used to train
Em_Mean$validation_data # the 100 other points
ValidateGasp(Em_Mean) # by default, predicts for the validation points
install.packages('sfsmisc')
library(sfsmisc)
# Emulator
summary(Em_Mean)
Em_Mean$train_data # 100 points sampled randomly from Design, used to train
Em_Mean$validation_data # the 100 other points
ValidateGasp(Em_Mean) # by default, predicts for the validation points
ValidateGasp(Em_Mean) # by default, predicts for the validation points
sum(HM_Wave1 < 3) / dim(BigDesign)[1] # 48% in NROY
print(JamesExample_gp$ParameterSamples$beta[JamesExample_gp$FastParts$tMAP, ])
print(JamesExample_gp$ParameterSamples$sigma[JamesExample_gp$FastParts$tMAP])
print(JamesExample_gp$ParameterSamples$delta_par[JamesExample_gp$FastParts$tMAP, ])
print(JamesExample_gp$ParameterSamples$nugget[JamesExample_gp$FastParts$tMAP])
names(Em_Mean)
Em_Mean$em
# Obtain hyperparameter estimates obtained with RobustGaSP
James_beta = c(-3.46226, -0.1510516, 0.1446057, -0.2264537, 0.2848979, 0.139043, 0.09291768, -0.1527876,
0.2204302, -0.1086564, 0.155149 )
# Obtain MAP estimates from emulator constructed with ExeterUQ
print(JamesExample_gp$ParameterSamples$beta[JamesExample_gp$FastParts$tMAP, ])
print(JamesExample_gp$ParameterSamples$sigma[JamesExample_gp$FastParts$tMAP])
print(JamesExample_gp$ParameterSamples$delta_par[JamesExample_gp$FastParts$tMAP, ])
print(JamesExample_gp$ParameterSamples$nugget[JamesExample_gp$FastParts$tMAP])
# Obtain hyperparameter estimates obtained with RobustGaSP
James_beta = c(-3.46226, -0.1510516, 0.1446057, -0.2264537, 0.2848979, 0.139043, 0.09291768, -0.1527876,
0.2204302, -0.1086564, 0.155149)
James_delta = c(32.27087, 0.04623202)
James_sigma = sqrt(0.02556684)
James_noise = 0.01371233
James_sigma
estimates_comparison = as.data.frame(cbind(c(JamesExample_gp$ParameterSamples$beta[JamesExample_gp$FastParts$tMAP, ],
JamesExample_gp$ParameterSamples$sigma[JamesExample_gp$FastParts$tMAP],
JamesExample_gp$ParameterSamples$delta_par[JamesExample_gp$FastParts$tMAP, ],
JamesExample_gp$ParameterSamples$nugget[JamesExample_gp$FastParts$tMAP]),
c(-3.46226, -0.1510516, 0.1446057, -0.2264537, 0.2848979, 0.139043, 0.09291768, -0.1527876,
0.2204302, -0.1086564, 0.155149, sqrt(0.02556684), c(32.27087, 0.04623202), 0.01371233)))
estimates_comparison
colnames(estimates_comparison) = c('ExeterUQ', 'RobustGaSP')
estimates_comparison
rownames(estimates_comparison) = c("beta0", "beta1", "beta2", "beta3", "beta4", "beta5", "beta6", "beta7", "beta8", "beta9",
"beta10", "sigma", "delta1", "delta2", "nugget")
estimates_comparison
par(mfrow=c(1,3), mar=c(4,2,2,2))
par(mfrow=c(1,3), mar=c(4,2,2,2))
plot(BigDesign[which(Timps1 >= Tbound),1:2], pch = 19, cex = 0.2) # white space is NROY
points(Em_Mean$train_data[,1:2], pch = 4, col = 'orange') # training data
points(design1, pch = 15, col = 'green')
plot(BigDesign[which(Timps1 >= Tbound),1:2], pch = 19, cex = 0.2) # white space is NROY
points(Em_Mean$train_data[,1:2], pch = 4, col = 'orange') # training data
points(design2, pch = 15, col = 'green')
plot(BigDesign[which(Timps1 >= Tbound),1:2], pch = 19, cex = 0.2) # white space is NROY
points(Em_Mean$train_data[,1:2], pch = 4, col = 'orange') # training data
points(design3, pch = 15, col = 'green')
par(mfrow=c(1,3), mar=c(4,2,2,2))
plot(BigDesign[which(Timps1 >= Tbound),1:2], pch = 19, cex = 0.2, main = 'Design 1') # white space is NROY
points(Em_Mean$train_data[,1:2], pch = 4, col = 'orange') # training data
points(design1, pch = 15, col = 'green')
plot(BigDesign[which(Timps1 >= Tbound),1:2], pch = 19, cex = 0.2, main = 'Design 2') # white space is NROY
points(Em_Mean$train_data[,1:2], pch = 4, col = 'orange') # training data
points(design2, pch = 15, col = 'green')
plot(BigDesign[which(Timps1 >= Tbound),1:2], pch = 19, cex = 0.2, main = 'Design 3') # white space is NROY
points(Em_Mean$train_data[,1:2], pch = 4, col = 'orange') # training data
points(design3, pch = 15, col = 'green')
dim(design1)
BDC_results = as.data.frame(cbind(c(BOD_detailed_statistics[[1]]$result-2*BOD_detailed_statistics[[1]]$resultstd_err,
BOD_detailed_statistics[[1]]$result,
BOD_detailed_statistics[[1]]$result + 2*BOD_detailed_statistics[[1]]$resultstd_err),
c(BOD_detailed_statistics[[2]]$result-2*BOD_detailed_statistics[[2]]$resultstd_err,
BOD_detailed_statistics[[2]]$result,
BOD_detailed_statistics[[2]]$result + 2*BOD_detailed_statistics[[2]]$resultstd_err),
c(BOD_detailed_statistics[[3]]$result-2*BOD_detailed_statistics[[3]]$resultstd_err,
BOD_detailed_statistics[[3]]$result,
BOD_detailed_statistics[[3]]$result + 2*BOD_detailed_statistics[[3]]$resultstd_err)))
BDC_results
rownames('score-2xstd_err', 'score', 'score+2xstd_err')
colnames(BDC_results) = c('design 1', 'design 2', 'design 3')
rownames(BDC_results) = c('score-2xstd_err', 'score', 'score+2xstd_err')
BDC_results
par(mfrow = c(1, 1), mar = c(4, 4, 2, 1))
plot(seq(1, 3, by = 1), rep(0, 3), xlim = c(0, 3),
ylim = range(BDC_results), type='n', ylab = 'BOD values',
xlab = 'Design')
par(mfrow = c(1, 1), mar = c(4, 4, 2, 1))
plot(seq(1, 3, by = 1), rep(0, 3), xlim = c(0, 3),
ylim = range(BDC_results), type='n', ylab = 'BDC',
xlab = 'Design', axes = FALSE)
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'green')
par(mfrow = c(1, 1), mar = c(4, 4, 2, 1))
plot(seq(1, 3, by = 1), rep(0, 3), xlim = c(0, 3),
ylim = range(BDC_results), type='n', ylab = 'BDC',
xlab = 'Design')
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'green')
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'darkgreen')
for(i in 1:dim(BDC_results)[2]) {
arrows(i, as.numeric(BDC_results[1, i]), i, as.numeric(BDC_results[3, i]),
length=0.05, angle=90, code=3, col='black')
}
par(mfrow = c(1, 1), mar = c(4, 4, 2, 1))
plot(seq(1, 3, by = 1), rep(0, 3), xlim = c(0, 3),
ylim = range(BDC_results), type='n', ylab = 'BDC',
xlab = 'Design', axes = FALSE)
axis(2)
axis(1, at=seq_along(BDC_results[2, ]), labels = c('design 1', 'design 2', 'design 3'), las=2)
box()
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'darkgreen')
for(i in 1:dim(BDC_results)[2]) {
arrows(i, as.numeric(BDC_results[1, i]), i, as.numeric(BDC_results[3, i]),
length=0.05, angle=90, code=3, col='black')
}
par(mfrow = c(1, 1), mar = c(4, 4, 2, 1))
plot(seq(1, 3, by = 1), rep(1, 3), xlim = c(0, 3),
ylim = range(BDC_results), type='n', ylab = 'BDC',
xlab = 'Design', axes = FALSE)
axis(2)
axis(1, at=seq_along(BDC_results[2, ]), labels = c('design 1', 'design 2', 'design 3'), las=2)
box()
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'darkgreen')
for(i in 1:dim(BDC_results)[2]) {
arrows(i, as.numeric(BDC_results[1, i]), i, as.numeric(BDC_results[3, i]),
length=0.05, angle=90, code=3, col='black')
}
par(mfrow = c(1, 1), mar = c(4, 4, 2, 1))
plot(seq(1, 3, by = 1), rep(1, 3), xlim = c(1, 3),
ylim = range(BDC_results), type='n', ylab = 'BDC',
xlab = '', axes = FALSE)
axis(2)
axis(1, at=seq_along(BDC_results[2, ]), labels = c('design 1', 'design 2', 'design 3'), las=2)
box()
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'darkgreen')
for(i in 1:dim(BDC_results)[2]) {
arrows(i, as.numeric(BDC_results[1, i]), i, as.numeric(BDC_results[3, i]),
length=0.05, angle=90, code=3, col='black')
}
par(mfrow = c(1, 1), mar = c(4, 2, 2, 1))
plot(seq(1, 3, by = 1), rep(1, 3), xlim = c(1, 3),
ylim = range(BDC_results), type='n', ylab = 'BDC',
xlab = '', axes = FALSE)
axis(2)
axis(1, at=seq_along(BDC_results[2, ]), labels = c('design 1', 'design 2', 'design 3'), las=2)
box()
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'darkgreen')
for(i in 1:dim(BDC_results)[2]) {
arrows(i, as.numeric(BDC_results[1, i]), i, as.numeric(BDC_results[3, i]),
length=0.05, angle=90, code=3, col='black')
}
par(mfrow = c(1, 1), mar = c(4, 3, 3, 1))
plot(seq(1, 3, by = 1), rep(1, 3), xlim = c(1, 3),
ylim = range(BDC_results), type='n', ylab = 'BDC',
xlab = '', axes = FALSE)
axis(2)
axis(1, at=seq_along(BDC_results[2, ]), labels = c('design 1', 'design 2', 'design 3'), las=2)
box()
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'darkgreen')
for(i in 1:dim(BDC_results)[2]) {
arrows(i, as.numeric(BDC_results[1, i]), i, as.numeric(BDC_results[3, i]),
length=0.05, angle=90, code=3, col='black')
}
par(mfrow = c(1, 1), mar = c(4, 3, 2, 3))
plot(seq(1, 3, by = 1), rep(1, 3), xlim = c(1, 3),
ylim = range(BDC_results), type='n', ylab = 'BDC',
xlab = '', axes = FALSE)
axis(2)
axis(1, at=seq_along(BDC_results[2, ]), labels = c('design 1', 'design 2', 'design 3'), las=2)
box()
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'darkgreen')
for(i in 1:dim(BDC_results)[2]) {
arrows(i, as.numeric(BDC_results[1, i]), i, as.numeric(BDC_results[3, i]),
length=0.05, angle=90, code=3, col='black')
}
par(mfrow = c(1, 1), mar = c(4, 3, 4, 3))
plot(seq(1, 3, by = 1), rep(1, 3), xlim = c(1, 3),
ylim = range(BDC_results), type='n', ylab = 'BDC',
xlab = '', axes = FALSE)
axis(2)
axis(1, at=seq_along(BDC_results[2, ]), labels = c('design 1', 'design 2', 'design 3'), las=2)
box()
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'darkgreen')
for(i in 1:dim(BDC_results)[2]) {
arrows(i, as.numeric(BDC_results[1, i]), i, as.numeric(BDC_results[3, i]),
length=0.05, angle=90, code=3, col='black')
}
par(mfrow = c(1, 1), mar = c(4, 3, 3, 4))
plot(seq(1, 3, by = 1), rep(1, 3), xlim = c(1, 3),
ylim = range(BDC_results), type='n', ylab = 'BDC',
xlab = '', axes = FALSE)
axis(2)
axis(1, at=seq_along(BDC_results[2, ]), labels = c('design 1', 'design 2', 'design 3'), las=2)
box()
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'darkgreen')
for(i in 1:dim(BDC_results)[2]) {
arrows(i, as.numeric(BDC_results[1, i]), i, as.numeric(BDC_results[3, i]),
length=0.05, angle=90, code=3, col='black')
}
par(mfrow = c(1, 1), mar = c(1, 3, 3, 4))
plot(seq(1, 3, by = 1), rep(1, 3), xlim = c(1, 3),
ylim = range(BDC_results), type='n', ylab = 'BDC',
xlab = '', axes = FALSE)
axis(2)
axis(1, at=seq_along(BDC_results[2, ]), labels = c('design 1', 'design 2', 'design 3'), las=2)
box()
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'darkgreen')
for(i in 1:dim(BDC_results)[2]) {
arrows(i, as.numeric(BDC_results[1, i]), i, as.numeric(BDC_results[3, i]),
length=0.05, angle=90, code=3, col='black')
}
par(mfrow = c(1, 1), mar = c(5, 3, 3, 1))
plot(seq(1, 3, by = 1), rep(1, 3), xlim = c(1, 3),
ylim = range(BDC_results), type='n', ylab = 'BDC',
xlab = '', axes = FALSE)
axis(2)
axis(1, at=seq_along(BDC_results[2, ]), labels = c('design 1', 'design 2', 'design 3'), las=2)
box()
points(seq(1, 3, by = 1), BDC_results[2, ], pch = 15, col = 'darkgreen')
for(i in 1:dim(BDC_results)[2]) {
arrows(i, as.numeric(BDC_results[1, i]), i, as.numeric(BDC_results[3, i]),
length=0.05, angle=90, code=3, col='black')
}
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(tVariance_two[[i]], n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid,
col = rev(heat.colors(50)), xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = paste('tVariance_two design', toString(i), sep = " "),
zlim = range(na.omit(tVariance_two[[1]]),
na.omit(tVariance_two[[2]]),
na.omit(tVariance_two[[3]])))
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(Term1[[i]], n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid, col = rev(heat.colors(50)),
zlim = range(na.omit(Term1[[i]])),
xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = paste('Term 1 design', toString(i), sep = " "))
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(-Term2[[i]]/2, n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid, col = rev(heat.colors(50)),
zlim = range(na.omit(-Term2[[i]]/2)),
xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = '')
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(-Term2[[i]]/2, n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid, col = rev(heat.colors(50)),
zlim = range(na.omit(-Term2[[i]]/2)),
xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = paste('Term 2 design', toString(i), sep = " "))
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
quartz()
par(mfrow = c(1, 3), mar = c(4, 2, 2, 1))
for(i in 1:length(candidate_designs)) {
z.grid <- matrix(Term3[[i]], n.grid, n.grid)
image.nan(x.grid,y.grid, z.grid, col = rev(heat.colors(50)),
zlim = range(na.omit(Term3[[i]])),
xlab = 'V1', ylab = 'V5', ylim = c(-1, 1),
xlim = c(-1, 1), main = paste('Term 3 design', toString(i), sep = " "))
points(Em_Mean$train_data[,1:2], pch = 4, col = 'blue') # training data
points(candidate_designs[[i]], pch = 15, col = 'green')
}
summary(HM_Wave1)
sum(HM_Wave1 < 3) / dim(BigDesign)[1] # 48% in NROY
sum(Timps1 < 3)dim(BigDesign)[1]
length(which(Timps1 < 3))dim(BigDesign)[1]
length(which(Timps1 < 3))/dim(BigDesign)[1]
length(c(01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34))
